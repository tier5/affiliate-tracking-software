<?php

    namespace Vokuro\Models;

    use Phalcon\Mvc\Model;
    use Phalcon\Mvc\Model\Behavior\SoftDelete;

    /**
     * SubscriptionPricingPlan
     *
     * @package Vokuro\Models
     * @autogenerated by Phalcon Developer Tools
     * @date 2016-05-23, 13:16:05
     */
    class SubscriptionPricingPlan extends BaseModel
    {
        public $id;
        public $user_id;
        public $name;
        public $enabled;
        public $enable_trial_account;
        public $enable_discount_on_upgrade;
        public $base_price;
        public $cost_per_sms;
        public $max_messages_on_trial_account;
        public $updgrade_discount;
        public $charge_per_sms;
        public $max_sms_messages;
        public $enable_annual_discount;
        public $annual_discount;
        public $pricing_details;
        public $created_at;
        public $updated_at;
        public $deleted_at;
        public $short_code;

        public function initialize()
        {
            $this->addBehavior(
                new SoftDelete(
                    array(
                        'field' => 'deleted_at',
                        'value' => time()
                    )
                )
            );

            $this->skipAttributesOnCreate(['updated_at']);
            $this->allowEmptyStringValues(['pricing_details']);
/*
            $this->hasMany(
                "id",
                "\Vokuro\Models\SubscriptionPricingPlanParameterList",
                "subscription_pricing_plan_id",
                [
                    'alias' => 'SubscriptionPricingPlanParameterList'
                ]
            );

 */
        }

        public function validation()
        {
            /* REFACTOR: Validations need more work, MT 23/06/2016 */
            return true;
        }

        /**
         * Returns table name mapped in the model.
         *
         * @return string
         */
        public function getSource()
        {
            return 'subscription_pricing_plan';
        }

        /**
         * Independent Column Mapping.
         * Keys are the real names in the table and the values their names in the application
         *
         * @return array
         */
        public function columnMap()
        {
            return array(
                'id' => 'id',
                'user_id' => 'user_id',
                'name' => 'name',
                'enabled' => 'enabled',
                'enable_trial_account' => 'enable_trial_account',
                'enable_discount_on_upgrade' => 'enable_discount_on_upgrade',
                'base_price' => 'base_price',
                'cost_per_sms' => 'cost_per_sms',
                'max_messages_on_trial_account' => 'max_messages_on_trial_account',
                'updgrade_discount' => 'updgrade_discount',
                'charge_per_sms' => 'charge_per_sms',
                'max_sms_messages' => 'max_sms_messages',
                'enable_annual_discount' => 'enable_annual_discount',
                'annual_discount' => 'annual_discount',
                'pricing_details' => 'pricing_details',
                'created_at' => 'created_at',
                'updated_at' => 'updated_at',
                'deleted_at' => 'deleted_at',
                'short_code'=>'short_code'
            );
        }

        public function generateAndSaveShortCode(){
            if(!$this->short_code){
                $characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
                $short_code = '';
                for ($i = 0; $i < 1; $i++) {
                    $short_code .= $characters[mt_rand(0, strlen($characters) - 1)];
                }
                $this->short_code = $short_code;
                $this->save();
                return $this->short_code;
            }
            return $this->short_code;
        }

        /**
         * @return mixed
         */
        public function getShortCode()
        {
            if(!$this->short_code) $this->generateAndSaveShortCode();
            return $this->short_code;
        }





    }
